!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
APPEND	.ref/minishell/includes/minishell.h	/^# define APPEND /;"	d
AR	libs/Makefile	/^AR				=	ar rcs$/;"	m
ARG	.ref/minishell/includes/minishell.h	/^# define ARG /;"	d
BLACK	Makefile	/^BLACK			=	"\\033[1;30m"$/;"	m
BLACK	includes/minishell.h	/^# define BLACK /;"	d
BLACK	libs/Makefile	/^BLACK			=	"\\033[1;30m"$/;"	m
BLUE	Makefile	/^BLUE			=	"\\033[1;34m"$/;"	m
BLUE	includes/minishell.h	/^# define BLUE /;"	d
BLUE	libs/Makefile	/^BLUE			=	"\\033[1;34m"$/;"	m
BREDIR	.ref/1_minishell/minishell.h	/^# define BREDIR	/;"	d
BUFFER_SIZE	.ref/1_minishell/Libft/libft.h	/^#  define BUFFER_SIZE /;"	d
BUFFER_SIZE	.ref/minishell/libft/includes/get_next_line.h	/^#  define BUFFER_SIZE /;"	d
BUFFER_SIZE	includes/minishell.h	/^#  define BUFFER_SIZE /;"	d
BUFFER_SIZE	libs/includes/libft.h	/^#  define BUFFER_SIZE /;"	d
BUFF_SIZE	.ref/minishell/includes/minishell.h	/^# define BUFF_SIZE /;"	d
BUILTINS	.ref/minishell/Makefile	/^BUILTINS = cd echo env exit export pwd unset$/;"	m
CC	.ref/1_minishell/Makefile	/^CC		=	gcc$/;"	m
CC	.ref/minishell/Makefile	/^CC = clang$/;"	m
CC	.ref/minishell/libft/Makefile	/^CC = clang$/;"	m
CC	Makefile	/^CC				=	gcc$/;"	m
CC	libs/Makefile	/^CC				=	gcc$/;"	m
CFLAGS	.ref/1_minishell/Libft/Makefile	/^CFLAGS = -Wall -Wextra -Werror -I. -c$/;"	m
CFLAGS	.ref/minishell/Makefile	/^CFLAGS = -Wall -Wextra -Werror -I includes\/ -I libft\/includes\/$/;"	m
CFLAGS	.ref/minishell/libft/Makefile	/^CFLAGS = -Wall -Wextra -Werror -I includes\/$/;"	m
CFLAGS	Makefile	/^CFLAGS			=	-Wall -Wextra -Werror$/;"	m
CFLAGS	libs/Makefile	/^CFLAGS			=	-Wall -Wextra -Werror$/;"	m
CMD	.ref/minishell/includes/minishell.h	/^# define CMD /;"	d
COLOR_BR_BLUE	.ref/1_minishell/minishell.h	/^# define COLOR_BR_BLUE	/;"	d
COLOR_CYAN	.ref/1_minishell/minishell.h	/^# define COLOR_CYAN	/;"	d
COLOR_WHITE	.ref/1_minishell/minishell.h	/^# define COLOR_WHITE	/;"	d
CYAN	Makefile	/^CYAN			=	"\\033[1;35m"$/;"	m
CYAN	includes/minishell.h	/^# define CYAN /;"	d
CYAN	libs/Makefile	/^CYAN			=	"\\033[1;35m"$/;"	m
DEBUG	.ref/1_minishell/Makefile	/^DEBUG	=	-g -fsanitize=address$/;"	m
DEBUG_FLAGS	libs/Makefile	/^DEBUG_FLAGS		=	-Wall -Wextra -Werror -g -fsanitize=address$/;"	m
DEBUG_OBJS_DIR	libs/Makefile	/^DEBUG_OBJS_DIR	=	objs_debug\/$/;"	m
DEBUG_OBJS_FILE	libs/Makefile	/^DEBUG_OBJS_FILE	=	$(addprefix $(DEBUG_OBJS_DIR), $(OBJS))$/;"	m
DREDIR	.ref/1_minishell/minishell.h	/^# define DREDIR	/;"	d
EMPTY	.ref/minishell/includes/minishell.h	/^# define EMPTY /;"	d
END	.ref/minishell/includes/minishell.h	/^# define END /;"	d
END_COLOR	.ref/1_minishell/minishell.h	/^# define END_COLOR	/;"	d
ENV	.ref/minishell/Makefile	/^ENV = env get_env sort_env shlvl$/;"	m
EOC	Makefile	/^EOC				=	"\\033[0;0m"$/;"	m
EOC	libs/Makefile	/^EOC				=	"\\033[0;0m"$/;"	m
ERROR	.ref/1_minishell/minishell.h	/^# define ERROR	/;"	d
ERROR	.ref/minishell/includes/minishell.h	/^# define ERROR /;"	d
EXEC	.ref/minishell/Makefile	/^EXEC = bin builtin exec$/;"	m
EXPANSION	.ref/minishell/includes/minishell.h	/^# define EXPANSION /;"	d
FALSE	.ref/1_minishell/minishell.h	/^# define FALSE	/;"	d
FD_NUMBER	.ref/1_minishell/Libft/libft.h	/^#  define FD_NUMBER /;"	d
FLAG	.ref/1_minishell/Makefile	/^FLAG	= 	-Wall -Wextra -Werror$/;"	m
FORK_ERROR	.ref/1_minishell/minishell.h	/^# define FORK_ERROR /;"	d
FTEX	.ref/minishell/libft/Makefile	/^FTEX = gnl\/get_next_line printf\/ft_printf$/;"	m
FTIS	.ref/minishell/libft/Makefile	/^FTIS = alnum alpha ascii count digit in print space spacenl where$/;"	m
FTLST	.ref/minishell/libft/Makefile	/^FTLST = add_back add_front clear delone iter last map new size$/;"	m
FTMATH	.ref/minishell/libft/Makefile	/^FTMATH = abs nbrlen hexlen baselen power$/;"	m
FTMEM	.ref/minishell/libft/Makefile	/^FTMEM = bzero calloc memccpy memchr memcmp memcpy memdel memmove memset$/;"	m
FTPRF	.ref/minishell/libft/Makefile	/^FTPRF = flagger branch_csp branch_duxo put_c put_s put_du put_o put_x put_p$/;"	m
FTPUT	.ref/minishell/libft/Makefile	/^FTPUT = char endl nbr str char_fd endl_fd nbr_fd str_fd$/;"	m
FTSKIP	.ref/minishell/libft/Makefile	/^FTSKIP = space spacenl char chars$/;"	m
FTSTR	.ref/minishell/libft/Makefile	/^FTSTR = chr cmp dup isnum join lcat lcpy len mapi ncmp nstr rchr trim$/;"	m
FTSUB	.ref/minishell/libft/Makefile	/^FTSUB = ft_str\/ft_substr ft_str\/ft_split$/;"	m
FTTO	.ref/minishell/libft/Makefile	/^FTTO = tolower toupper atoi itoa$/;"	m
FT_PRINTF_H	.ref/minishell/libft/includes/ft_printf.h	/^# define FT_PRINTF_H$/;"	d
GET_NEXT_LINE_H	.ref/minishell/libft/includes/get_next_line.h	/^# define GET_NEXT_LINE_H$/;"	d
GREEN	Makefile	/^GREEN			=	"\\033[1;32m"$/;"	m
GREEN	includes/minishell.h	/^# define GREEN /;"	d
GREEN	libs/Makefile	/^GREEN			=	"\\033[1;32m"$/;"	m
HEADER	.ref/1_minishell/Makefile	/^HEADER	=	-I.\/$/;"	m
HEADER	.ref/minishell/Makefile	/^HEADER = minishell.h$/;"	m
HEADER	.ref/minishell/libft/Makefile	/^HEADER = $(addsuffix .h, $(addprefix includes\/, libutils get_next_line ft_printf))$/;"	m
HEADER_FLAG	Makefile	/^HEADER_FLAG		=	-I$(INCS_DIR) -I$(LIBFT_INCS)$/;"	m
HEADER_FLAG	libs/Makefile	/^HEADER_FLAG		=	-I$(INCS_DIR)$/;"	m
INCS	Makefile	/^INCS				=	minishell.h$/;"	m
INCS	libs/Makefile	/^INCS			=	libft.h$/;"	m
INCS_DIR	Makefile	/^INCS_DIR		=	.\/includes\/$/;"	m
INCS_DIR	libs/Makefile	/^INCS_DIR		=	includes\/$/;"	m
INCS_FILE	Makefile	/^INCS_FILE		= 	$(addprefix $(INCS_DIR), $(INCS))$/;"	m
INCS_FILE	libs/Makefile	/^INCS_FILE		= 	$(addprefix $(INCS_DIR), $(INCS))$/;"	m
INPUT	.ref/minishell/includes/minishell.h	/^# define INPUT /;"	d
IS_DIRECTORY	.ref/minishell/includes/minishell.h	/^# define IS_DIRECTORY /;"	d
LIBFT	.ref/1_minishell/Makefile	/^LIBFT	=	libft.a$/;"	m
LIBFT	.ref/minishell/Makefile	/^LIBFT = -L libft -lft$/;"	m
LIBFT	Makefile	/^LIBFT			=	.\/libs\/libft.a$/;"	m
LIBFT_DIR	Makefile	/^LIBFT_DIR		=	.\/libs$/;"	m
LIBFT_H	.ref/1_minishell/Libft/libft.h	/^# define LIBFT_H$/;"	d
LIBFT_H	.ref/minishell/libft/includes/libft.h	/^# define LIBFT_H$/;"	d
LIBFT_H	libs/includes/libft.h	/^# define LIBFT_H$/;"	d
LIBFT_INCS	Makefile	/^LIBFT_INCS		=	.\/libs\/includes\/libft.h$/;"	m
LIBS	.ref/1_minishell/Makefile	/^LIBS	=	-L.\/Libft -lft$/;"	m
LIB_FLAG	Makefile	/^LIB_FLAG		=	-lft -L$(LIBFT_DIR) -L\/usr\/include -lreadline$/;"	m
MAIN	.ref/minishell/Makefile	/^MAIN = minishell redir signal$/;"	m
MALLOC_ERROR	.ref/1_minishell/minishell.h	/^# define MALLOC_ERROR /;"	d
MAXSIZE	.ref/1_minishell/minishell.h	/^# define MAXSIZE	/;"	d
MINISHELL_H	.ref/1_minishell/minishell.h	/^# define MINISHELL_H$/;"	d
MINISHELL_H	.ref/minishell/includes/minishell.h	/^# define MINISHELL_H$/;"	d
MINISHELL_H	includes/minishell.h	/^# define MINISHELL_H$/;"	d
NAME	.ref/1_minishell/Libft/Makefile	/^NAME = libft.a$/;"	m
NAME	.ref/1_minishell/Makefile	/^NAME	=	minishell$/;"	m
NAME	.ref/minishell/Makefile	/^NAME = minishell$/;"	m
NAME	.ref/minishell/libft/Makefile	/^NAME = libft.a$/;"	m
NAME	Makefile	/^NAME			=	minishell$/;"	m
NAME	libs/Makefile	/^NAME			=	libft.a$/;"	m
NAME_DEBUG	libs/Makefile	/^NAME_DEBUG		=	libft_debug.a$/;"	m
NOSKIP	.ref/minishell/includes/minishell.h	/^# define NOSKIP /;"	d
OBJ	.ref/minishell/Makefile	/^OBJ = $(SRC:c=o)$/;"	m
OBJ	.ref/minishell/libft/Makefile	/^OBJ = $(SRC:.c=.o)$/;"	m
OBJS	.ref/1_minishell/Libft/Makefile	/^OBJS = $(SRCS:%.c=%.o)$/;"	m
OBJS	Makefile	/^OBJS				=	$(patsubst %.c, %.o, $(SRCS))$/;"	m
OBJS	libs/Makefile	/^OBJS			=	$(patsubst %.c, %.o, $(SRCS))$/;"	m
OBJS_DIR	Makefile	/^OBJS_DIR		=	.\/objs\/$/;"	m
OBJS_DIR	libs/Makefile	/^OBJS_DIR		=	objs\/$/;"	m
OBJS_FILE	Makefile	/^OBJS_FILE		=	$(addprefix $(OBJS_DIR), $(OBJS))$/;"	m
OBJS_FILE	libs/Makefile	/^OBJS_FILE		=	$(addprefix $(OBJS_DIR), $(OBJS))$/;"	m
OPEN_MAX	libs/includes/libft.h	/^#  define OPEN_MAX /;"	d
PARSING	.ref/minishell/Makefile	/^PARSING = line tokens expansions$/;"	m
PIPE	.ref/minishell/includes/minishell.h	/^# define PIPE /;"	d
PIPE_ERROR	.ref/1_minishell/minishell.h	/^# define PIPE_ERROR /;"	d
PROMPT	includes/minishell.h	/^# define PROMPT /;"	d
PURPLE	Makefile	/^PURPLE			=	"\\033[1;36m"$/;"	m
PURPLE	includes/minishell.h	/^# define PURPLE /;"	d
PURPLE	libs/Makefile	/^PURPLE			=	"\\033[1;36m"$/;"	m
QUOTE_ERROR	.ref/1_minishell/minishell.h	/^# define QUOTE_ERROR /;"	d
RED	Makefile	/^RED				=	"\\033[1;31m"$/;"	m
RED	includes/minishell.h	/^# define RED /;"	d
RED	libs/Makefile	/^RED				=	"\\033[1;31m"$/;"	m
REDIR	.ref/1_minishell/minishell.h	/^# define REDIR	/;"	d
RESET	includes/minishell.h	/^# define RESET /;"	d
RM	.ref/1_minishell/Makefile	/^RM		=	rm -rf$/;"	m
RM	Makefile	/^RM				=	rm -rf$/;"	m
RM	libs/Makefile	/^RM				=	rm -rf$/;"	m
SKIP	.ref/minishell/includes/minishell.h	/^# define SKIP /;"	d
SRC	.ref/minishell/Makefile	/^SRC = $(addsuffix .c, $(addprefix srcs\/builtins\/, $(BUILTINS))) \\$/;"	m
SRC	.ref/minishell/libft/Makefile	/^SRC = $(addsuffix .c, $(addprefix ft_is\/ft_is, $(FTIS))) \\$/;"	m
SRCS	.ref/1_minishell/Libft/Makefile	/^SRCS = ft_isalnum.c ft_isalpha.c ft_isascii.c ft_isdigit.c ft_isprint.c \\$/;"	m
SRCS	.ref/1_minishell/Makefile	/^SRCS	= 	main.c \\$/;"	m
SRCS	Makefile	/^SRCS				=	main.c error.c$/;"	m
SRCS	libs/Makefile	/^SRCS			=	ft_memset.c ft_bzero.c ft_memcpy.c ft_memmove.c ft_memchr.c ft_memcmp.c ft_memccpy.c \\$/;"	m
SRCS_DIR	Makefile	/^SRCS_DIR		=	.\/srcs\/$/;"	m
SRCS_DIR	libs/Makefile	/^SRCS_DIR		=	srcs\/$/;"	m
SRCS_FILE	Makefile	/^SRCS_FILE		=	$(addprefix $(SRCS_DIR), $(SRCS))$/;"	m
SRCS_FILE	libs/Makefile	/^SRCS_FILE		=	$(addprefix $(SRCS_DIR), $(SRCS))$/;"	m
STDERR	.ref/1_minishell/minishell.h	/^# define STDERR /;"	d
STDERR	.ref/minishell/includes/minishell.h	/^# define STDERR /;"	d
STDERR	includes/minishell.h	/^# define STDERR /;"	d
STDIN	.ref/1_minishell/minishell.h	/^# define STDIN /;"	d
STDIN	.ref/minishell/includes/minishell.h	/^# define STDIN /;"	d
STDIN	includes/minishell.h	/^# define STDIN /;"	d
STDOUT	.ref/1_minishell/minishell.h	/^# define STDOUT /;"	d
STDOUT	.ref/minishell/includes/minishell.h	/^# define STDOUT /;"	d
STDOUT	includes/minishell.h	/^# define STDOUT /;"	d
SUCCESS	.ref/1_minishell/minishell.h	/^# define SUCCESS /;"	d
SUCCESS	.ref/minishell/includes/minishell.h	/^# define SUCCESS /;"	d
SYNTAX_ERROR	.ref/1_minishell/minishell.h	/^# define SYNTAX_ERROR	/;"	d
TOOLS	.ref/minishell/Makefile	/^TOOLS = fd free token type expansions parsing$/;"	m
TRUE	.ref/1_minishell/minishell.h	/^# define TRUE	/;"	d
TRUNC	.ref/minishell/includes/minishell.h	/^# define TRUNC /;"	d
UNKNOWN_COMMAND	.ref/minishell/includes/minishell.h	/^# define UNKNOWN_COMMAND /;"	d
WHITE	Makefile	/^WHITE			=	"\\033[1;37m"$/;"	m
WHITE	includes/minishell.h	/^# define WHITE /;"	d
WHITE	libs/Makefile	/^WHITE			=	"\\033[1;37m"$/;"	m
YELLOW	Makefile	/^YELLOW			=	"\\033[1;33m"$/;"	m
YELLOW	includes/minishell.h	/^# define YELLOW /;"	d
YELLOW	libs/Makefile	/^YELLOW			=	"\\033[1;33m"$/;"	m
add_export	.ref/1_minishell/builtins/ft_export.c	/^void		add_export(char *str, char **new, int i)$/;"	f
add_node	.ref/1_minishell/parser/parser.c	/^int			add_node(t_data *data, t_list *head, char *input, int symbol)$/;"	f
alloc_size	.ref/minishell/libft/ft_str/ft_strtrim.c	/^static int	alloc_size(char const *s1, char const *set)$/;"	f	file:
arg_alloc_len	.ref/minishell/srcs/tools/expansions.c	/^int		arg_alloc_len(const char *arg, t_env *env, int ret)$/;"	f
argc	.ref/1_minishell/minishell.h	/^	int			argc;$/;"	m	struct:s_redir
argv	.ref/1_minishell/minishell.h	/^	char		**argv;$/;"	m	struct:s_redir
arr_size	libs/srcs/ft_itoa.c	/^int			arr_size(int n)$/;"	f
arr_size	libs/srcs/ft_uitoa.c	/^static int	arr_size(unsigned int n)$/;"	f	file:
arr_size	libs/srcs/ft_utoa.c	/^static int	arr_size(unsigned long long n)$/;"	f	file:
bot	libs/includes/libft.h	/^	t_node			*bot;$/;"	m	struct:s_stack
buf_join	.ref/minishell/libft/ft_gnl/get_next_line.c	/^char	*buf_join(char *stock, char *buf)$/;"	f
buf_write	.ref/minishell/libft/ft_printf/ft_printf.c	/^void	buf_write(char *buffer, char c, int *printed)$/;"	f
buff	.ref/1_minishell/minishell.h	/^	char		*buff;$/;"	m	struct:s_data
buffer	.ref/1_minishell/Libft/libft.h	/^	char		buffer[BUFFER_SIZE];$/;"	m	struct:s_gnl_material
buffer	.ref/minishell/libft/includes/ft_printf.h	/^	char	buffer[4096];$/;"	m	struct:s_flgs
change_from_double_to_single_cmdline	.ref/1_minishell/redirection/utils_redir2.c	/^char	*change_from_double_to_single_cmdline(char **cmdline)$/;"	f
charge	.ref/minishell/includes/minishell.h	/^	int				charge;$/;"	m	struct:s_mini
check_builtin	.ref/1_minishell/utils/utils_execute.c	/^int			check_builtin(char **cmdline)$/;"	f
check_dir	.ref/minishell/srcs/exec/bin.c	/^char		*check_dir(char *bin, char *command)$/;"	f
check_export	.ref/1_minishell/builtins/ft_export.c	/^int			check_export(char *str, char ***envs)$/;"	f
check_key_value	.ref/1_minishell/builtins/ft_unset.c	/^int		check_key_value(char *str, char *envs)$/;"	f
check_line	.ref/minishell/srcs/tools/parsing.c	/^int		check_line(t_mini *mini, t_token *token)$/;"	f
check_option_n	.ref/1_minishell/builtins/ft_echo.c	/^int			check_option_n(char *token)$/;"	f
check_white_space	.ref/1_minishell/parser/utils_parse.c	/^int		check_white_space(char *input)$/;"	f
clear_ptr1	.ref/1_minishell/parser/parse_error.c	/^static void	clear_ptr1(t_data *ptr1)$/;"	f	file:
close_fds	.ref/minishell/srcs/tools/fd.c	/^void	close_fds(t_mini *mini)$/;"	f
cmd	.ref/1_minishell/minishell.h	/^	t_cmd		*cmd;$/;"	m	struct:s_data
cmd	includes/minishell.h	/^	char		*cmd;$/;"	m	struct:s_conf
cmd_redir	.ref/1_minishell/redirection/cmd_redir.c	/^void			cmd_redir(t_cmd *cmd, t_redir *r)$/;"	f
cmd_tab	.ref/minishell/srcs/exec/exec.c	/^char	**cmd_tab(t_token *start)$/;"	f
cmdlines	.ref/1_minishell/minishell.h	/^	char		**cmdlines;$/;"	m	struct:s_cmd
cmds	.ref/1_minishell/minishell.h	/^	char		**cmds;$/;"	m	struct:s_redir
content	.ref/1_minishell/Libft/libft.h	/^	void			*content;$/;"	m	struct:s_list
content	.ref/minishell/libft/includes/libft.h	/^	void			*content;$/;"	m	struct:s_list
content	libs/includes/libft.h	/^	void			*content;$/;"	m	struct:s_list
copy_buffer	.ref/1_minishell/Libft/get_next_line.c	/^static int		copy_buffer(char **line, t_gnl_material *material)$/;"	f	file:
copy_envp	.ref/1_minishell/utils/utils_envv.c	/^char			**copy_envp(char **envs)$/;"	f
count_token	.ref/1_minishell/parser/utils_parse.c	/^int		count_token(char *input)$/;"	f
count_words	.ref/1_minishell/Libft/ft_split.c	/^static int	count_words(char const *s, char c)$/;"	f	file:
cur	libs/includes/libft.h	/^	t_node			*cur;$/;"	m	struct:s_stack
do_bredir	.ref/1_minishell/redirection/cmd_redir.c	/^static int		do_bredir(t_cmd *cmd, t_redir *r)$/;"	f	file:
do_dredir	.ref/1_minishell/redirection/cmd_redir.c	/^static int		do_dredir(t_cmd *cmd, t_redir *r)$/;"	f	file:
do_redir	.ref/1_minishell/redirection/cmd_redir.c	/^static int		do_redir(t_cmd *cmd, t_redir *r)$/;"	f	file:
dot	.ref/minishell/libft/includes/ft_printf.h	/^	int		dot;$/;"	m	struct:s_flgs
each_len	.ref/1_minishell/Libft/ft_split.c	/^static int	each_len(char const *s, char c, int start)$/;"	f	file:
env	.ref/minishell/includes/minishell.h	/^	t_env			*env;$/;"	m	struct:s_mini
env	includes/minishell.h	/^	char		**env;$/;"	m	struct:s_conf
env_add	.ref/minishell/srcs/builtins/export.c	/^int			env_add(const char *value, t_env *env)$/;"	f
env_init	.ref/minishell/srcs/env/env.c	/^int				env_init(t_mini *mini, char **env_array)$/;"	f
env_size	.ref/minishell/srcs/builtins/unset.c	/^static size_t	env_size(char *env)$/;"	f	file:
env_to_str	.ref/minishell/srcs/env/env.c	/^char			*env_to_str(t_env *lst)$/;"	f
env_value	.ref/minishell/srcs/env/get_env.c	/^char	*env_value(char *env)$/;"	f
env_value_len	.ref/minishell/srcs/env/get_env.c	/^int		env_value_len(const char *env)$/;"	f
error_message	.ref/minishell/srcs/exec/bin.c	/^int			error_message(char *path)$/;"	f
exec_bin	.ref/minishell/srcs/exec/bin.c	/^int			exec_bin(char **args, t_env *env, t_mini *mini)$/;"	f
exec_builtin	.ref/1_minishell/execute/exec_process.c	/^int			exec_builtin(t_cmd *cmd, char **cmdline)$/;"	f
exec_builtin	.ref/minishell/srcs/exec/builtin.c	/^int		exec_builtin(char **args, t_mini *mini)$/;"	f
exec_child_process	.ref/1_minishell/execute/exec_process.c	/^void		exec_child_process(t_cmd *cmd, t_cmd *next_cmd)$/;"	f
exec_cmd	.ref/minishell/srcs/exec/exec.c	/^void	exec_cmd(t_mini *mini, t_token *token)$/;"	f
exec_pipe	.ref/1_minishell/execute/exec_process.c	/^int			exec_pipe(t_list *cur_proc, t_cmd *cmd)$/;"	f
exec_process	.ref/1_minishell/execute/exec_process.c	/^void		exec_process(t_list *head)$/;"	f
exec_redir	.ref/1_minishell/redirection/exec_redir.c	/^void	exec_redir(t_cmd *cmd, char **cmdline)$/;"	f
exit	.ref/minishell/includes/minishell.h	/^	int				exit;$/;"	m	struct:s_mini
exit	includes/minishell.h	/^	int			exit;$/;"	m	struct:s_conf
exit_status	.ref/minishell/includes/minishell.h	/^	int				exit_status;$/;"	m	struct:s_sig
expand_line_size	.ref/1_minishell/Libft/get_next_line.c	/^static int		expand_line_size(char **line, size_t *line_size)$/;"	f	file:
expansions	.ref/minishell/srcs/parsing/expansions.c	/^char			*expansions(char *arg, t_env *env, int ret)$/;"	f
fdin	.ref/minishell/includes/minishell.h	/^	int				fdin;$/;"	m	struct:s_mini
fdout	.ref/minishell/includes/minishell.h	/^	int				fdout;$/;"	m	struct:s_mini
fds	.ref/1_minishell/minishell.h	/^	int			fds[2];$/;"	m	struct:s_cmd
find_path	.ref/1_minishell/utils/utils_envv.c	/^char			*find_path(char *cmdline, char **envs)$/;"	f
find_redir_type	.ref/1_minishell/redirection/utils_redir.c	/^int		find_redir_type(char *command, int i)$/;"	f
find_start	.ref/1_minishell/Libft/ft_split.c	/^static int	find_start(char const *s, char c, int i)$/;"	f	file:
find_value	.ref/1_minishell/utils/utils_envv.c	/^char			*find_value(char *key, char **envs)$/;"	f
flag	.ref/1_minishell/minishell.h	/^	int			flag;$/;"	m	struct:s_cmd
flagger	.ref/minishell/libft/ft_printf/ft_printf_flagger.c	/^void	flagger(const char *s, int *i, struct s_flgs *flags, va_list args)$/;"	f
free_cmdline	.ref/1_minishell/parser/parse_error.c	/^void		free_cmdline(void *content)$/;"	f
free_double_arr	.ref/1_minishell/redirection/utils_redir.c	/^void	free_double_arr(char **arr)$/;"	f
free_double_str	.ref/1_minishell/parser/parse_error.c	/^void		free_double_str(char **ptr)$/;"	f
free_env	.ref/minishell/srcs/tools/free.c	/^void	free_env(t_env *env)$/;"	f
free_node	.ref/minishell/srcs/builtins/unset.c	/^static void		free_node(t_mini *mini, t_env *env)$/;"	f	file:
free_tab	.ref/minishell/srcs/tools/free.c	/^void	free_tab(char **tab)$/;"	f
free_token	.ref/minishell/srcs/tools/free.c	/^void	free_token(t_token *start)$/;"	f
ft_abs	.ref/minishell/libft/ft_math/ft_abs.c	/^int	ft_abs(long n)$/;"	f
ft_atoi	.ref/1_minishell/Libft/ft_atoi.c	/^int	ft_atoi(const char *str)$/;"	f
ft_atoi	.ref/minishell/libft/ft_to/ft_atoi.c	/^int	ft_atoi(const char *str)$/;"	f
ft_atoi	libs/srcs/ft_atoi.c	/^int				ft_atoi(const char *str)$/;"	f
ft_atol	libs/srcs/ft_atol.c	/^long long		ft_atol(char *str)$/;"	f
ft_baselen	.ref/minishell/libft/ft_math/ft_baselen.c	/^int		ft_baselen(long n, int base)$/;"	f
ft_bzero	.ref/1_minishell/Libft/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f
ft_bzero	.ref/minishell/libft/ft_mem/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f
ft_bzero	libs/srcs/ft_bzero.c	/^void				ft_bzero(void *ptr, size_t num)$/;"	f
ft_calloc	.ref/1_minishell/Libft/ft_calloc.c	/^void	*ft_calloc(size_t count, size_t size)$/;"	f
ft_calloc	.ref/minishell/libft/ft_mem/ft_calloc.c	/^void	*ft_calloc(size_t count, size_t size)$/;"	f
ft_calloc	libs/srcs/ft_calloc.c	/^void		*ft_calloc(size_t count, size_t size)$/;"	f
ft_cd	.ref/1_minishell/builtins/ft_cd.c	/^void		ft_cd(char **cmdline, char **envs)$/;"	f
ft_cd	.ref/minishell/srcs/builtins/cd.c	/^int				ft_cd(char **args, t_env *env)$/;"	f
ft_cd_envv	.ref/1_minishell/builtins/ft_cd.c	/^int			ft_cd_envv(char *path, char **cmdline, char **envs)$/;"	f
ft_cd_home	.ref/1_minishell/builtins/ft_cd.c	/^int			ft_cd_home(char *path, char **cmdline, char **envs)$/;"	f
ft_close	.ref/minishell/srcs/tools/fd.c	/^void	ft_close(int fd)$/;"	f
ft_double_strlen	.ref/1_minishell/Libft/ft_double_strlen.c	/^int		ft_double_strlen(char **str)$/;"	f
ft_double_strlen	libs/srcs/ft_strlen.c	/^size_t		ft_double_strlen(const char **str)$/;"	f
ft_echo	.ref/1_minishell/builtins/ft_echo.c	/^void		ft_echo(char **cmdline, char **envs)$/;"	f
ft_echo	.ref/minishell/srcs/builtins/echo.c	/^int				ft_echo(char **args)$/;"	f
ft_echo_envv	.ref/1_minishell/builtins/ft_echo.c	/^void		ft_echo_envv(char **cmdline, char **envs, int i)$/;"	f
ft_env	.ref/1_minishell/builtins/ft_env.c	/^void	ft_env(char **envs)$/;"	f
ft_env	.ref/minishell/srcs/builtins/env.c	/^int		ft_env(t_env *env)$/;"	f
ft_exit	.ref/1_minishell/builtins/ft_exit.c	/^void	ft_exit(t_cmd *cmd, char **cmdline)$/;"	f
ft_exit_errcode	.ref/1_minishell/builtins/ft_exit.c	/^void	ft_exit_errcode(void)$/;"	f
ft_export	.ref/1_minishell/builtins/ft_export.c	/^void		ft_export(t_cmd *cmd, char **cmdline)$/;"	f
ft_export	.ref/minishell/srcs/builtins/export.c	/^int			ft_export(char **args, t_env *env, t_env *secret)$/;"	f
ft_find_end_index	.ref/1_minishell/Libft/ft_strtrim.c	/^static int	ft_find_end_index(int k, char *s1, char *set)$/;"	f	file:
ft_find_start_index	.ref/1_minishell/Libft/ft_strtrim.c	/^static int	ft_find_start_index(int i, char *s1, char *set)$/;"	f	file:
ft_free_double	libs/srcs/ft_memfree.c	/^int		ft_free_double(void **ptr)$/;"	f
ft_free_single	libs/srcs/ft_memfree.c	/^int		ft_free_single(void *ptr)$/;"	f
ft_get_nb_strs	libs/srcs/ft_split.c	/^static unsigned int	ft_get_nb_strs(char const *s, char c)$/;"	f	file:
ft_get_next_str	libs/srcs/ft_split.c	/^static void			ft_get_next_str(char **next_str, unsigned int *next_str_len,$/;"	f	file:
ft_hexlen	.ref/minishell/libft/ft_math/ft_hexlen.c	/^int		ft_hexlen(long n)$/;"	f
ft_is_allnum	libs/srcs/ft_is_all_num.c	/^int		ft_is_allnum(char **str)$/;"	f
ft_isalnum	.ref/1_minishell/Libft/ft_isalnum.c	/^int	ft_isalnum(int c)$/;"	f
ft_isalnum	.ref/minishell/libft/ft_is/ft_isalnum.c	/^int	ft_isalnum(int c)$/;"	f
ft_isalnum	libs/srcs/ft_isalnum.c	/^int	ft_isalnum(int c)$/;"	f
ft_isalpha	.ref/1_minishell/Libft/ft_isalpha.c	/^int	ft_isalpha(int c)$/;"	f
ft_isalpha	.ref/minishell/libft/ft_is/ft_isalpha.c	/^int	ft_isalpha(int c)$/;"	f
ft_isalpha	libs/srcs/ft_isalpha.c	/^int	ft_isalpha(int c)$/;"	f
ft_isascii	.ref/1_minishell/Libft/ft_isascii.c	/^int	ft_isascii(int c)$/;"	f
ft_isascii	.ref/minishell/libft/ft_is/ft_isascii.c	/^int	ft_isascii(int c)$/;"	f
ft_isascii	libs/srcs/ft_isascii.c	/^int	ft_isascii(int c)$/;"	f
ft_iscount	.ref/minishell/libft/ft_is/ft_iscount.c	/^int	ft_iscount(int c, char *base)$/;"	f
ft_isdigit	.ref/1_minishell/Libft/ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f
ft_isdigit	.ref/minishell/libft/ft_is/ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f
ft_isdigit	libs/srcs/ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f
ft_isdigit_str	.ref/1_minishell/Libft/ft_isdigit_str.c	/^int		ft_isdigit_str(char *str)$/;"	f
ft_isin	.ref/minishell/libft/ft_is/ft_isin.c	/^int	ft_isin(int c, char *base)$/;"	f
ft_isnum	libs/srcs/ft_isnum.c	/^int		ft_isnum(char c)$/;"	f
ft_isprint	.ref/1_minishell/Libft/ft_isprint.c	/^int	ft_isprint(int c)$/;"	f
ft_isprint	.ref/minishell/libft/ft_is/ft_isprint.c	/^int	ft_isprint(int c)$/;"	f
ft_isprint	libs/srcs/ft_isprint.c	/^int	ft_isprint(int c)$/;"	f
ft_isspace	.ref/minishell/libft/ft_is/ft_isspace.c	/^int	ft_isspace(int c)$/;"	f
ft_isspacenl	.ref/minishell/libft/ft_is/ft_isspacenl.c	/^int	ft_isspacenl(int c)$/;"	f
ft_iswhere	.ref/minishell/libft/ft_is/ft_iswhere.c	/^int	ft_iswhere(int c, char *base)$/;"	f
ft_itoa	.ref/1_minishell/Libft/ft_itoa.c	/^char	*ft_itoa(int n)$/;"	f
ft_itoa	.ref/minishell/libft/ft_to/ft_itoa.c	/^char		*ft_itoa(int n)$/;"	f
ft_itoa	libs/srcs/ft_itoa.c	/^char		*ft_itoa(int n)$/;"	f
ft_lstadd_back	.ref/1_minishell/Libft/ft_lstadd_back.c	/^void	ft_lstadd_back(t_list **lst, t_list *new)$/;"	f
ft_lstadd_back	.ref/minishell/libft/ft_lst/ft_lstadd_back.c	/^void	ft_lstadd_back(t_list **alst, t_list *new)$/;"	f
ft_lstadd_back	libs/srcs/ft_lstadd_back.c	/^void		ft_lstadd_back(t_list **lst, t_list *new)$/;"	f
ft_lstadd_front	.ref/1_minishell/Libft/ft_lstadd_front.c	/^void	ft_lstadd_front(t_list **lst, t_list *new)$/;"	f
ft_lstadd_front	.ref/minishell/libft/ft_lst/ft_lstadd_front.c	/^void	ft_lstadd_front(t_list **alst, t_list *new)$/;"	f
ft_lstadd_front	libs/srcs/ft_lstadd_front.c	/^void	ft_lstadd_front(t_list **lst, t_list *new)$/;"	f
ft_lstclear	.ref/1_minishell/Libft/ft_lstclear.c	/^void	ft_lstclear(t_list **lst, void (*del)(void *))$/;"	f
ft_lstclear	.ref/minishell/libft/ft_lst/ft_lstclear.c	/^void	ft_lstclear(t_list **lst, void (*del)(void*))$/;"	f
ft_lstclear	libs/srcs/ft_lstclear.c	/^void		ft_lstclear(t_list **lst, void (*del)(void *))$/;"	f
ft_lstdelone	.ref/1_minishell/Libft/ft_lstdelone.c	/^void	ft_lstdelone(t_list *lst, void (*del)(void *))$/;"	f
ft_lstdelone	.ref/minishell/libft/ft_lst/ft_lstdelone.c	/^void	ft_lstdelone(t_list *lst, void (*del)(void*))$/;"	f
ft_lstdelone	libs/srcs/ft_lstdelone.c	/^void	ft_lstdelone(t_list *lst, void (*del)(void *))$/;"	f
ft_lstiter	.ref/1_minishell/Libft/ft_lstiter.c	/^void	ft_lstiter(t_list *lst, void (*f)(void *))$/;"	f
ft_lstiter	.ref/minishell/libft/ft_lst/ft_lstiter.c	/^void	ft_lstiter(t_list *lst, void (*f)(void *))$/;"	f
ft_lstiter	libs/srcs/ft_lstiter.c	/^void	ft_lstiter(t_list *lst, void (*f)(void *))$/;"	f
ft_lstlast	.ref/1_minishell/Libft/ft_lstlast.c	/^t_list	*ft_lstlast(t_list *lst)$/;"	f
ft_lstlast	.ref/minishell/libft/ft_lst/ft_lstlast.c	/^t_list	*ft_lstlast(t_list *lst)$/;"	f
ft_lstlast	libs/srcs/ft_lstlast.c	/^t_list	*ft_lstlast(t_list *lst)$/;"	f
ft_lstmap	.ref/1_minishell/Libft/ft_lstmap.c	/^t_list	*ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *))$/;"	f
ft_lstmap	.ref/minishell/libft/ft_lst/ft_lstmap.c	/^t_list			*ft_lstmap(t_list *lst, void *(*f)(void*), void (*del)(void *))$/;"	f
ft_lstmap	libs/srcs/ft_lstmap.c	/^t_list		*ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *))$/;"	f
ft_lstnew	.ref/1_minishell/Libft/ft_lstnew.c	/^t_list	*ft_lstnew(void *content)$/;"	f
ft_lstnew	.ref/minishell/libft/ft_lst/ft_lstnew.c	/^t_list	*ft_lstnew(void *content)$/;"	f
ft_lstnew	libs/srcs/ft_lstnew.c	/^t_list		*ft_lstnew(void *content)$/;"	f
ft_lstsize	.ref/1_minishell/Libft/ft_lstsize.c	/^int	ft_lstsize(t_list *lst)$/;"	f
ft_lstsize	.ref/minishell/libft/ft_lst/ft_lstsize.c	/^int	ft_lstsize(t_list *lst)$/;"	f
ft_lstsize	libs/srcs/ft_lstsize.c	/^int		ft_lstsize(t_stack *t)$/;"	f
ft_malloc_error	libs/srcs/ft_split.c	/^static char			**ft_malloc_error(char **tab)$/;"	f	file:
ft_memccpy	.ref/1_minishell/Libft/ft_memccpy.c	/^void	*ft_memccpy(void *dest, const void *src, int c, size_t n)$/;"	f
ft_memccpy	.ref/minishell/libft/ft_mem/ft_memccpy.c	/^void	*ft_memccpy(void *dst, const void *src, int c, size_t n)$/;"	f
ft_memccpy	libs/srcs/ft_memccpy.c	/^void				*ft_memccpy(void *dst, const void *src, int c, size_t n)$/;"	f
ft_memchr	.ref/1_minishell/Libft/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f
ft_memchr	.ref/minishell/libft/ft_mem/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f
ft_memchr	libs/srcs/ft_memchr.c	/^void				*ft_memchr(void *ptr, int val, size_t num)$/;"	f
ft_memcmp	.ref/1_minishell/Libft/ft_memcmp.c	/^int	ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f
ft_memcmp	.ref/minishell/libft/ft_mem/ft_memcmp.c	/^int	ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f
ft_memcmp	libs/srcs/ft_memcmp.c	/^int					ft_memcmp(const void *ptr1, const void *ptr2, size_t num)$/;"	f
ft_memcpy	.ref/1_minishell/Libft/ft_memcpy.c	/^void	*ft_memcpy(void *dest, const void *src, size_t n)$/;"	f
ft_memcpy	.ref/minishell/libft/ft_mem/ft_memcpy.c	/^void	*ft_memcpy(void *dst, const void *src, size_t n)$/;"	f
ft_memcpy	libs/srcs/ft_memcpy.c	/^void		*ft_memcpy(void *dst, const void *src, size_t num)$/;"	f
ft_memdel	.ref/minishell/libft/ft_mem/ft_memdel.c	/^void	*ft_memdel(void *ptr)$/;"	f
ft_memmove	.ref/1_minishell/Libft/ft_memmove.c	/^void	*ft_memmove(void *dest, const void *src, size_t len)$/;"	f
ft_memmove	.ref/minishell/libft/ft_mem/ft_memmove.c	/^void	*ft_memmove(void *dst, const void *src, size_t len)$/;"	f
ft_memmove	libs/srcs/ft_memmove.c	/^void		*ft_memmove(void *dst, const void *src, size_t num)$/;"	f
ft_memset	.ref/1_minishell/Libft/ft_memset.c	/^void	*ft_memset(void *b, int c, size_t len)$/;"	f
ft_memset	.ref/minishell/libft/ft_mem/ft_memset.c	/^void	*ft_memset(void *b, int c, size_t len)$/;"	f
ft_memset	libs/srcs/ft_memset.c	/^void	*ft_memset(void *ptr, int value, size_t num)$/;"	f
ft_nbrlen	.ref/minishell/libft/ft_math/ft_nbrlen.c	/^int		ft_nbrlen(long n)$/;"	f
ft_num_len	.ref/1_minishell/Libft/ft_itoa.c	/^int		ft_num_len(int n)$/;"	f
ft_numlen	libs/srcs/ft_numlen.c	/^int		ft_numlen(char *str)$/;"	f
ft_positive_n_write	.ref/1_minishell/Libft/ft_putnbr_fd.c	/^static void	ft_positive_n_write(long long nbr, int fd)$/;"	f	file:
ft_power	.ref/minishell/libft/ft_math/ft_power.c	/^int		ft_power(int nbr, int pow)$/;"	f
ft_printf	.ref/minishell/libft/ft_printf/ft_printf.c	/^int		ft_printf(const char *string, ...)$/;"	f
ft_putchar	.ref/minishell/libft/ft_put/ft_putchar.c	/^void	ft_putchar(char c)$/;"	f
ft_putchar_fd	.ref/1_minishell/Libft/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f
ft_putchar_fd	.ref/minishell/libft/ft_put/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f
ft_putchar_fd	libs/srcs/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f
ft_putendl	.ref/minishell/libft/ft_put/ft_putendl.c	/^void	ft_putendl(char *s)$/;"	f
ft_putendl_fd	.ref/1_minishell/Libft/ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f
ft_putendl_fd	.ref/minishell/libft/ft_put/ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f
ft_putendl_fd	libs/srcs/ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f
ft_puterror_fd	.ref/1_minishell/redirection/utils_redir2.c	/^int		ft_puterror_fd(char *s1, char *s2, int fd)$/;"	f
ft_putnbr	.ref/minishell/libft/ft_put/ft_putnbr.c	/^void	ft_putnbr(int n)$/;"	f
ft_putnbr_fd	.ref/1_minishell/Libft/ft_putnbr_fd.c	/^void		ft_putnbr_fd(int n, int fd)$/;"	f
ft_putnbr_fd	.ref/minishell/libft/ft_put/ft_putnbr_fd.c	/^void	ft_putnbr_fd(int n, int fd)$/;"	f
ft_putnbr_fd	libs/srcs/ft_putnbr_fd.c	/^void	ft_putnbr_fd(int n, int fd)$/;"	f
ft_putstr	.ref/minishell/libft/ft_put/ft_putstr.c	/^void	ft_putstr(char *s)$/;"	f
ft_putstr_fd	.ref/1_minishell/Libft/ft_putstr_fd.c	/^void	ft_putstr_fd(char *s, int fd)$/;"	f
ft_putstr_fd	.ref/minishell/libft/ft_put/ft_putstr_fd.c	/^void	ft_putstr_fd(char *s, int fd)$/;"	f
ft_putstr_fd	libs/srcs/ft_putstr_fd.c	/^void	ft_putstr_fd(char *s, int fd)$/;"	f
ft_pwd	.ref/1_minishell/builtins/ft_pwd.c	/^void		ft_pwd(void)$/;"	f
ft_pwd	.ref/minishell/srcs/builtins/pwd.c	/^int		ft_pwd(void)$/;"	f
ft_skip_char	.ref/minishell/libft/ft_skip/ft_skip_char.c	/^void	ft_skip_char(const char *str, int *i, char c)$/;"	f
ft_skip_chars	.ref/minishell/libft/ft_skip/ft_skip_chars.c	/^void	ft_skip_chars(const char *str, int *i, char *base)$/;"	f
ft_skip_space	.ref/minishell/libft/ft_skip/ft_skip_space.c	/^void	ft_skip_space(const char *str, int *i)$/;"	f
ft_skip_spacenl	.ref/minishell/libft/ft_skip/ft_skip_spacenl.c	/^void	ft_skip_spacenl(const char *str, int *i)$/;"	f
ft_split	.ref/1_minishell/Libft/ft_split.c	/^char		**ft_split(char const *s, char c)$/;"	f
ft_split	.ref/minishell/libft/ft_str/ft_split.c	/^char		**ft_split(char const *s, char c)$/;"	f
ft_split	libs/srcs/ft_split.c	/^char				**ft_split(char const *s, char c)$/;"	f
ft_str_copy	.ref/1_minishell/Libft/ft_strtrim.c	/^static char	*ft_str_copy(char *s1, char *result, int start, int end)$/;"	f	file:
ft_strchr	.ref/1_minishell/Libft/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f
ft_strchr	.ref/minishell/libft/ft_str/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f
ft_strchr	libs/srcs/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f
ft_strcmp	.ref/1_minishell/Libft/ft_strcmp.c	/^int		ft_strcmp(char *s1, char *s2)$/;"	f
ft_strcmp	.ref/minishell/libft/ft_str/ft_strcmp.c	/^int	ft_strcmp(const char *s1, const char *s2)$/;"	f
ft_strcmp	libs/srcs/ft_strcmp.c	/^int		ft_strcmp(char *s1, char *s2)$/;"	f
ft_strcpy	.ref/1_minishell/Libft/ft_strcpy.c	/^char	*ft_strcpy(char *dest, char *src)$/;"	f
ft_strdup	.ref/1_minishell/Libft/ft_strdup.c	/^char	*ft_strdup(const char *s1)$/;"	f
ft_strdup	.ref/minishell/libft/ft_str/ft_strdup.c	/^char	*ft_strdup(const char *s1)$/;"	f
ft_strdup	libs/srcs/ft_strdup.c	/^char		*ft_strdup(const char *s1)$/;"	f
ft_strisnum	.ref/minishell/libft/ft_str/ft_strisnum.c	/^int	ft_strisnum(const char *str)$/;"	f
ft_strjoin	.ref/1_minishell/Libft/ft_strjoin.c	/^char		*ft_strjoin(char const *s1, char const *s2)$/;"	f
ft_strjoin	.ref/minishell/libft/ft_str/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f
ft_strjoin	libs/srcs/ft_strjoin.c	/^char		*ft_strjoin(char *s1, char *s2)$/;"	f
ft_strjoin_c	.ref/1_minishell/redirection/utils_redir2.c	/^char	*ft_strjoin_c(char *s, char c)$/;"	f
ft_strlcat	.ref/1_minishell/Libft/ft_strlcat.c	/^size_t	ft_strlcat(char *dest, const char *src, size_t size)$/;"	f
ft_strlcat	.ref/minishell/libft/ft_str/ft_strlcat.c	/^size_t	ft_strlcat(char *dst, const char *src, size_t dstsize)$/;"	f
ft_strlcat	libs/srcs/ft_strlcat.c	/^size_t		ft_strlcat(char *dst, const char *src, size_t size)$/;"	f
ft_strlcpy	.ref/1_minishell/Libft/ft_strlcpy.c	/^size_t	ft_strlcpy(char *dest, const char *src, size_t size)$/;"	f
ft_strlcpy	.ref/minishell/libft/ft_str/ft_strlcpy.c	/^size_t	ft_strlcpy(char *dst, const char *src, size_t dstsize)$/;"	f
ft_strlcpy	libs/srcs/ft_strlcpy.c	/^size_t		ft_strlcpy(char *dst, const char *src, size_t dstsize)$/;"	f
ft_strlen	.ref/1_minishell/Libft/ft_strlen.c	/^size_t	ft_strlen(const char *s)$/;"	f
ft_strlen	.ref/minishell/libft/ft_str/ft_strlen.c	/^size_t	ft_strlen(const char *s)$/;"	f
ft_strlen	libs/srcs/ft_strlen.c	/^size_t		ft_strlen(const char *str)$/;"	f
ft_strmapi	.ref/1_minishell/Libft/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f
ft_strmapi	.ref/minishell/libft/ft_str/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f
ft_strmapi	libs/srcs/ft_strmapi.c	/^char				*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f
ft_strncmp	.ref/1_minishell/Libft/ft_strncmp.c	/^int	ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f
ft_strncmp	.ref/minishell/libft/ft_str/ft_strncmp.c	/^int	ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f
ft_strncmp	libs/srcs/ft_strncmp.c	/^size_t		ft_strncmp(const char *s1, const char *s2, size_t num)$/;"	f
ft_strnrcmp	libs/srcs/ft_strnrcmp.c	/^int		ft_strnrcmp(char *s1, char *s2, int cnt)$/;"	f
ft_strnstr	.ref/1_minishell/Libft/ft_strnstr.c	/^char	*ft_strnstr(const char *big, const char *little, size_t len)$/;"	f
ft_strnstr	.ref/minishell/libft/ft_str/ft_strnstr.c	/^char	*ft_strnstr(const char *haystack, const char *needle, size_t len)$/;"	f
ft_strnstr	libs/srcs/ft_strnstr.c	/^char		*ft_strnstr(const char *haystack, const char *needle, size_t len)$/;"	f
ft_strnum	libs/srcs/ft_isnum.c	/^int		ft_strnum(char *str)$/;"	f
ft_strrchr	.ref/1_minishell/Libft/ft_strrchr.c	/^char	*ft_strrchr(const char *s, int c)$/;"	f
ft_strrchr	.ref/minishell/libft/ft_str/ft_strrchr.c	/^char	*ft_strrchr(const char *s, int c)$/;"	f
ft_strrchr	libs/srcs/ft_strrchr.c	/^char		*ft_strrchr(const char *s, int c)$/;"	f
ft_strtok	.ref/1_minishell/Libft/ft_strtok.c	/^char	*ft_strtok(char *str, char sepa)$/;"	f
ft_strtrim	.ref/1_minishell/Libft/ft_strtrim.c	/^char		*ft_strtrim(char const *s1, char const *set)$/;"	f
ft_strtrim	.ref/minishell/libft/ft_str/ft_strtrim.c	/^char		*ft_strtrim(char const *s1, char const *set)$/;"	f
ft_strtrim	libs/srcs/ft_strtrim.c	/^char		*ft_strtrim(char const *s1, char const *set)$/;"	f
ft_substr	.ref/1_minishell/Libft/ft_substr.c	/^char	*ft_substr(char const *s, unsigned int start, size_t len)$/;"	f
ft_substr	.ref/minishell/libft/ft_str/ft_substr.c	/^char	*ft_substr(char const *s, unsigned int start, size_t len)$/;"	f
ft_substr	libs/srcs/ft_substr.c	/^char		*ft_substr(char const *s, unsigned int start, size_t len)$/;"	f
ft_tolower	.ref/1_minishell/Libft/ft_tolower.c	/^int	ft_tolower(int c)$/;"	f
ft_tolower	.ref/minishell/libft/ft_to/ft_tolower.c	/^int	ft_tolower(int c)$/;"	f
ft_tolower	libs/srcs/ft_tolower.c	/^int	ft_tolower(int c)$/;"	f
ft_toupper	.ref/1_minishell/Libft/ft_toupper.c	/^int	ft_toupper(int c)$/;"	f
ft_toupper	.ref/minishell/libft/ft_to/ft_toupper.c	/^int	ft_toupper(int c)$/;"	f
ft_toupper	libs/srcs/ft_toupper.c	/^int	ft_toupper(int c)$/;"	f
ft_uitoa	libs/srcs/ft_uitoa.c	/^char		*ft_uitoa(unsigned int n)$/;"	f
ft_unset	.ref/1_minishell/builtins/ft_unset.c	/^void	ft_unset(t_cmd *cmd, char **cmdline)$/;"	f
ft_unset	.ref/minishell/srcs/builtins/unset.c	/^int				ft_unset(char **a, t_mini *mini)$/;"	f
ft_utoa	libs/srcs/ft_utoa.c	/^char		*ft_utoa(unsigned long long n, char *base_set)$/;"	f
func_branch	.ref/minishell/libft/ft_printf/ft_printf.c	/^int		func_branch(const char *s, int *i, va_list args, struct s_flgs *flags)$/;"	f
g_envp	.ref/1_minishell/main.c	/^char	**g_envp = NULL;$/;"	v
g_exit_status	.ref/1_minishell/main.c	/^int		g_exit_status = 0;$/;"	v
g_parse_error	.ref/1_minishell/parser/parser.c	/^int	g_parse_error;$/;"	v
g_sh	srcs/main.c	/^t_conf		g_sh;$/;"	v
g_sig	.ref/minishell/srcs/main/minishell.c	/^t_sig	g_sig;$/;"	v
get_command_line	.ref/1_minishell/main.c	/^int			get_command_line(char **input)$/;"	f
get_env_name	.ref/minishell/srcs/builtins/export.c	/^char		*get_env_name(char *dest, const char *src)$/;"	f
get_env_path	.ref/minishell/srcs/builtins/cd.c	/^static char		*get_env_path(t_env *env, const char *var, size_t len)$/;"	f	file:
get_env_value	.ref/minishell/srcs/env/get_env.c	/^char	*get_env_value(char *arg, t_env *env)$/;"	f
get_line	.ref/minishell/libft/ft_gnl/get_next_line.c	/^char	*get_line(char *stock)$/;"	f
get_lvl	.ref/minishell/srcs/env/shlvl.c	/^static int			get_lvl(const char *str)$/;"	f	file:
get_next_line	.ref/1_minishell/Libft/get_next_line.c	/^int				get_next_line(int fd, char **line)$/;"	f
get_next_line	.ref/minishell/libft/ft_gnl/get_next_line.c	/^int		get_next_line(int fd, char **line)$/;"	f
get_next_line	libs/srcs/ft_gnl.c	/^int					get_next_line(int fd, char **line)$/;"	f
get_tokens	.ref/minishell/srcs/parsing/tokens.c	/^t_token	*get_tokens(char *line)$/;"	f
get_var_len	.ref/minishell/srcs/tools/expansions.c	/^int		get_var_len(const char *arg, int pos, t_env *env, int ret)$/;"	f
get_var_value	.ref/minishell/srcs/tools/expansions.c	/^char	*get_var_value(const char *arg, int pos, t_env *env, int ret)$/;"	f
go_to_path	.ref/minishell/srcs/builtins/cd.c	/^static int		go_to_path(int option, t_env *env)$/;"	f	file:
handle_sigint	srcs/main.c	/^void	handle_sigint(int signum)$/;"	f
handle_signal	.ref/1_minishell/utils/utils_signal.c	/^void		handle_signal(int signo)$/;"	f
handle_sigquit	srcs/main.c	/^void	handle_sigquit(int signum)$/;"	f
has_pipe	.ref/minishell/srcs/tools/type.c	/^int		has_pipe(t_token *token)$/;"	f
has_redir	.ref/1_minishell/minishell.h	/^	int			has_redir;$/;"	m	struct:s_cmd
has_redir_syntax_error	.ref/1_minishell/redirection/utils_redir.c	/^int		has_redir_syntax_error(char *str)$/;"	f
has_type	.ref/minishell/srcs/tools/type.c	/^int		has_type(t_token *token, int type)$/;"	f
i	.ref/1_minishell/minishell.h	/^	int			i;$/;"	m	struct:s_data
i	.ref/minishell/includes/minishell.h	/^	int				i;$/;"	m	struct:s_expansions
idx	libs/includes/libft.h	/^	int				idx;$/;"	m	struct:s_node
ignore_sep	.ref/minishell/srcs/tools/parsing.c	/^int		ignore_sep(char *line, int i)$/;"	f
in	.ref/minishell/includes/minishell.h	/^	int				in;$/;"	m	struct:s_mini
increment_shell_level	.ref/minishell/srcs/env/shlvl.c	/^void				increment_shell_level(t_env *env)$/;"	f
index	.ref/minishell/libft/includes/ft_printf.h	/^	int		index;$/;"	m	struct:s_flgs
init_redir	.ref/1_minishell/redirection/exec_redir.c	/^void	init_redir(char *command, t_redir *re)$/;"	f
initialize	.ref/1_minishell/parser/utils_parse.c	/^void	*initialize(char *input, t_data *data, t_list **head)$/;"	f
input	.ref/minishell/srcs/main/redir.c	/^void	input(t_mini *mini, t_token *token)$/;"	f
insert_var	.ref/minishell/srcs/parsing/expansions.c	/^static void		insert_var(t_expansions *ex, char *arg, t_env *env, int ret)$/;"	f	file:
inter	includes/minishell.h	/^	struct sigaction inter;$/;"	m	struct:s_conf	typeref:struct:s_conf::sigaction
invalid_lvl	.ref/minishell/srcs/env/shlvl.c	/^static int			invalid_lvl(const char *str)$/;"	f	file:
is_builtin	.ref/minishell/srcs/exec/builtin.c	/^int		is_builtin(char *command)$/;"	f
is_end_flag	.ref/minishell/libft/ft_printf/ft_printf_flagger.c	/^int		is_end_flag(const char c)$/;"	f
is_env_char	.ref/minishell/srcs/env/get_env.c	/^int		is_env_char(int c)$/;"	f
is_in_env	.ref/minishell/srcs/builtins/export.c	/^int			is_in_env(t_env *env, char *args)$/;"	f
is_last_valid_arg	.ref/minishell/srcs/tools/parsing.c	/^int		is_last_valid_arg(t_token *token)$/;"	f
is_newline	libs/srcs/ft_gnl.c	/^static int			is_newline(char *backup)$/;"	f	file:
is_sep	.ref/minishell/srcs/tools/parsing.c	/^int		is_sep(char *line, int i)$/;"	f
is_set	.ref/minishell/libft/ft_str/ft_strtrim.c	/^static int	is_set(char c, const char *set)$/;"	f	file:
is_single_redir	.ref/1_minishell/redirection/utils_redir.c	/^int		is_single_redir(char *command, int i)$/;"	f
is_sorted	libs/includes/libft.h	/^	int				is_sorted;$/;"	m	struct:s_node
is_type	.ref/minishell/srcs/tools/type.c	/^int		is_type(t_token *token, int type)$/;"	f
is_types	.ref/minishell/srcs/tools/type.c	/^int		is_types(t_token *token, char *types)$/;"	f
is_valid_env	.ref/minishell/srcs/env/get_env.c	/^int		is_valid_env(const char *env)$/;"	f
is_valid_flag	.ref/minishell/libft/ft_printf/ft_printf_flagger.c	/^int		is_valid_flag(const char c)$/;"	f
isvalid_env	.ref/1_minishell/builtins/ft_unset.c	/^int		isvalid_env(char *name)$/;"	f
isvalid_export	.ref/1_minishell/builtins/ft_export.c	/^int			isvalid_export(char *key)$/;"	f
j	.ref/1_minishell/minishell.h	/^	int			j;$/;"	m	struct:s_data
j	.ref/minishell/includes/minishell.h	/^	int				j;$/;"	m	struct:s_expansions
k	.ref/1_minishell/minishell.h	/^	int			k;$/;"	m	struct:s_data
last	.ref/minishell/includes/minishell.h	/^	int				last;$/;"	m	struct:s_mini
last_idx	.ref/1_minishell/Libft/libft.h	/^	size_t		last_idx;$/;"	m	struct:s_gnl_material
letter_count	.ref/minishell/libft/ft_str/ft_split.c	/^static int	letter_count(char const *s, char c, int index)$/;"	f	file:
lstlast	.ref/1_minishell/minishell.h	/^	t_list		*lstlast;$/;"	m	struct:s_data
magic_box	.ref/minishell/srcs/exec/bin.c	/^int			magic_box(char *path, char **args, t_env *env, t_mini *mini)$/;"	f
main	.ref/1_minishell/main.c	/^int			main(int argc, char **argv, char **envp)$/;"	f
main	.ref/minishell/srcs/main/minishell.c	/^int		main(int ac, char **av, char **env)$/;"	f
main	srcs/main.c	/^int main(int ac, char **av, char **envp)$/;"	f
map_ft_memdel	.ref/minishell/libft/ft_lst/ft_lstmap.c	/^static t_list	*map_ft_memdel(t_list *start, void (*del)(void *))$/;"	f	file:
mini_exit	.ref/minishell/srcs/builtins/exit.c	/^void	mini_exit(t_mini *mini, char **cmd)$/;"	f
minipipe	.ref/minishell/srcs/main/redir.c	/^int		minipipe(t_mini *mini)$/;"	f
minishell	.ref/minishell/srcs/main/minishell.c	/^void	minishell(t_mini *mini)$/;"	f
minus	.ref/minishell/libft/includes/ft_printf.h	/^	int		minus;$/;"	m	struct:s_flgs
nb_args	.ref/minishell/srcs/builtins/echo.c	/^static	int		nb_args(char **args)$/;"	f	file:
new_arg	.ref/minishell/includes/minishell.h	/^	char			*new_arg;$/;"	m	struct:s_expansions
newline_check	.ref/minishell/libft/ft_gnl/get_next_line.c	/^int		newline_check(char *stock, int read_size)$/;"	f
next	.ref/1_minishell/Libft/libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list
next	.ref/minishell/includes/minishell.h	/^	struct s_env	*next;$/;"	m	struct:s_env	typeref:struct:s_env::s_env
next	.ref/minishell/includes/minishell.h	/^	struct s_token	*next;$/;"	m	struct:s_token	typeref:struct:s_token::s_token
next	.ref/minishell/libft/includes/libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list
next	libs/includes/libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list
next	libs/includes/libft.h	/^	struct s_node	*next;$/;"	m	struct:s_node	typeref:struct:s_node::s_node
next_alloc	.ref/minishell/srcs/parsing/tokens.c	/^int		next_alloc(char *line, int *i)$/;"	f
next_run	.ref/minishell/srcs/tools/token.c	/^t_token	*next_run(t_token *token, int skip)$/;"	f
next_sep	.ref/minishell/srcs/tools/token.c	/^t_token	*next_sep(t_token *token, int skip)$/;"	f
next_token	.ref/minishell/srcs/parsing/tokens.c	/^t_token	*next_token(char *line, int *i)$/;"	f
next_type	.ref/minishell/srcs/tools/type.c	/^t_token	*next_type(t_token *token, int type, int skip)$/;"	f
no_exec	.ref/minishell/includes/minishell.h	/^	int				no_exec;$/;"	m	struct:s_mini
open_unnecessary_files	.ref/1_minishell/redirection/exec_redir.c	/^void	open_unnecessary_files(t_redir *r)$/;"	f
out	.ref/minishell/includes/minishell.h	/^	int				out;$/;"	m	struct:s_mini
parent	.ref/minishell/includes/minishell.h	/^	int				parent;$/;"	m	struct:s_mini
parse	.ref/1_minishell/parser/parser.c	/^void		*parse(char *input_temp)$/;"	f
parse	.ref/minishell/srcs/parsing/line.c	/^void	parse(t_mini *mini)$/;"	f
parse_all_char	.ref/1_minishell/parser/parser.c	/^void		parse_all_char(char *input, t_data *data, t_list *head)$/;"	f
parse_error	.ref/1_minishell/parser/parse_error.c	/^void		*parse_error(t_data *ptr1, t_list *ptr2, char *comment)$/;"	f
parse_redir	.ref/1_minishell/redirection/exec_redir.c	/^int		parse_redir(char *command, t_redir *r)$/;"	f
parse_redir_final	.ref/1_minishell/redirection/exec_redir.c	/^int		parse_redir_final(t_redir *r, int j)$/;"	f
path_join	.ref/minishell/srcs/exec/bin.c	/^char		*path_join(const char *s1, const char *s2)$/;"	f
pf_atoi_star	.ref/minishell/libft/ft_printf/ft_printf_flagger.c	/^int		pf_atoi_star(const char *s, int *i, va_list args)$/;"	f
pf_hexlen	.ref/minishell/libft/ft_printf/ft_printf_put_x.c	/^int		pf_hexlen(unsigned int n)$/;"	f
pf_memlen	.ref/minishell/libft/ft_printf/ft_printf_put_p.c	/^int		pf_memlen(unsigned long n)$/;"	f
pf_nbrlen	.ref/minishell/libft/ft_printf/ft_printf_put_du.c	/^int		pf_nbrlen(long n)$/;"	f
pf_neg_star	.ref/minishell/libft/ft_printf/ft_printf_flagger.c	/^void	pf_neg_star(struct s_flgs *flags)$/;"	f
pf_octlen	.ref/minishell/libft/ft_printf/ft_printf_put_o.c	/^int		pf_octlen(unsigned int n)$/;"	f
pf_print_char	.ref/minishell/libft/ft_printf/ft_printf_branch_csp.c	/^int		pf_print_char(char c, struct s_flgs *flags)$/;"	f
pf_print_hex	.ref/minishell/libft/ft_printf/ft_printf_branch_duxo.c	/^int		pf_print_hex(unsigned int n, struct s_flgs *flags, char c)$/;"	f
pf_print_mem	.ref/minishell/libft/ft_printf/ft_printf_branch_csp.c	/^int		pf_print_mem(unsigned long n, struct s_flgs *flags)$/;"	f
pf_print_nbr	.ref/minishell/libft/ft_printf/ft_printf_branch_duxo.c	/^int		pf_print_nbr(long n, struct s_flgs *flags)$/;"	f
pf_print_oct	.ref/minishell/libft/ft_printf/ft_printf_branch_duxo.c	/^int		pf_print_oct(unsigned int n, struct s_flgs *flags)$/;"	f
pf_print_other	.ref/minishell/libft/ft_printf/ft_printf_branch_duxo.c	/^int		pf_print_other(char c, struct s_flgs *flags)$/;"	f
pf_print_str	.ref/minishell/libft/ft_printf/ft_printf_branch_csp.c	/^int		pf_print_str(char *s, struct s_flgs *flags)$/;"	f
pf_putchar	.ref/minishell/libft/ft_printf/ft_printf_put_c.c	/^int		pf_putchar(struct s_flgs *flags, char c)$/;"	f
pf_putchar_minwid	.ref/minishell/libft/ft_printf/ft_printf_put_c.c	/^int		pf_putchar_minwid(struct s_flgs *flags, char c, int width)$/;"	f
pf_putchar_wid	.ref/minishell/libft/ft_printf/ft_printf_put_c.c	/^int		pf_putchar_wid(struct s_flgs *flags, char c, int width)$/;"	f
pf_putchar_zerowid	.ref/minishell/libft/ft_printf/ft_printf_put_c.c	/^int		pf_putchar_zerowid(struct s_flgs *flags, char c, int width)$/;"	f
pf_puthex	.ref/minishell/libft/ft_printf/ft_printf_put_x.c	/^int		pf_puthex(struct s_flgs *flags, unsigned int n, int cap)$/;"	f
pf_puthex_pre	.ref/minishell/libft/ft_printf/ft_printf_put_x.c	/^int		pf_puthex_pre(unsigned int n, struct s_flgs *flags, int cap)$/;"	f
pf_puthex_prewid	.ref/minishell/libft/ft_printf/ft_printf_put_x.c	/^int		pf_puthex_prewid(unsigned int n, struct s_flgs *flags, int cap)$/;"	f
pf_puthex_wid	.ref/minishell/libft/ft_printf/ft_printf_put_x.c	/^int		pf_puthex_wid(unsigned int n, struct s_flgs *flags, int cap)$/;"	f
pf_putmem	.ref/minishell/libft/ft_printf/ft_printf_put_p.c	/^int		pf_putmem(struct s_flgs *flags, unsigned long n, int start)$/;"	f
pf_putmem_pre	.ref/minishell/libft/ft_printf/ft_printf_put_p.c	/^int		pf_putmem_pre(unsigned long n, struct s_flgs *flags)$/;"	f
pf_putmem_prewid	.ref/minishell/libft/ft_printf/ft_printf_put_p.c	/^int		pf_putmem_prewid(unsigned long n, struct s_flgs *flags)$/;"	f
pf_putmem_wid	.ref/minishell/libft/ft_printf/ft_printf_put_p.c	/^int		pf_putmem_wid(unsigned long n, struct s_flgs *flags)$/;"	f
pf_putnbr	.ref/minishell/libft/ft_printf/ft_printf_put_du.c	/^int		pf_putnbr(struct s_flgs *flags, long n)$/;"	f
pf_putnbr_pre	.ref/minishell/libft/ft_printf/ft_printf_put_du.c	/^int		pf_putnbr_pre(long n, struct s_flgs *flags)$/;"	f
pf_putnbr_prewid	.ref/minishell/libft/ft_printf/ft_printf_put_du.c	/^int		pf_putnbr_prewid(long n, struct s_flgs *flags)$/;"	f
pf_putnbr_wid	.ref/minishell/libft/ft_printf/ft_printf_put_du.c	/^int		pf_putnbr_wid(long n, struct s_flgs *flags)$/;"	f
pf_putoct	.ref/minishell/libft/ft_printf/ft_printf_put_o.c	/^int		pf_putoct(struct s_flgs *flags, unsigned int n)$/;"	f
pf_putoct_pre	.ref/minishell/libft/ft_printf/ft_printf_put_o.c	/^int		pf_putoct_pre(unsigned int n, struct s_flgs *flags)$/;"	f
pf_putoct_prewid	.ref/minishell/libft/ft_printf/ft_printf_put_o.c	/^int		pf_putoct_prewid(unsigned int n, struct s_flgs *flags)$/;"	f
pf_putoct_wid	.ref/minishell/libft/ft_printf/ft_printf_put_o.c	/^int		pf_putoct_wid(unsigned int n, struct s_flgs *flags)$/;"	f
pf_putstr	.ref/minishell/libft/ft_printf/ft_printf_put_s.c	/^int		pf_putstr(struct s_flgs *flags, char *s)$/;"	f
pf_putstr_pre	.ref/minishell/libft/ft_printf/ft_printf_put_s.c	/^int		pf_putstr_pre(struct s_flgs *flags, char *s, int prec)$/;"	f
pf_putstr_prewid	.ref/minishell/libft/ft_printf/ft_printf_put_s.c	/^int		pf_putstr_prewid(char *s, struct s_flgs *flags)$/;"	f
pf_putstr_wid	.ref/minishell/libft/ft_printf/ft_printf_put_s.c	/^int		pf_putstr_wid(char *s, struct s_flgs *flags)$/;"	f
pf_strlen	.ref/minishell/libft/ft_printf/ft_printf_put_s.c	/^int		pf_strlen(char *s)$/;"	f
pid	.ref/minishell/includes/minishell.h	/^	int				pid;$/;"	m	struct:s_mini
pid	.ref/minishell/includes/minishell.h	/^	pid_t			pid;$/;"	m	struct:s_sig
pipin	.ref/minishell/includes/minishell.h	/^	int				pipin;$/;"	m	struct:s_mini
pipout	.ref/minishell/includes/minishell.h	/^	int				pipout;$/;"	m	struct:s_mini
precision	.ref/minishell/libft/includes/ft_printf.h	/^	int		precision;$/;"	m	struct:s_flgs
preflag	.ref/1_minishell/minishell.h	/^	int			preflag;$/;"	m	struct:s_cmd
prev	.ref/minishell/includes/minishell.h	/^	struct s_token	*prev;$/;"	m	struct:s_token	typeref:struct:s_token::s_token
prev	libs/includes/libft.h	/^	struct s_node	*prev;$/;"	m	struct:s_node	typeref:struct:s_node::s_node
prev_sep	.ref/minishell/srcs/tools/token.c	/^t_token	*prev_sep(t_token *token, int skip)$/;"	f
print_errno_err	.ref/1_minishell/errors/exit_err.c	/^void	print_errno_err(char *err_msg)$/;"	f
print_error	.ref/minishell/srcs/builtins/cd.c	/^static void		print_error(char **args)$/;"	f	file:
print_error	.ref/minishell/srcs/builtins/export.c	/^static int	print_error(int error, const char *arg)$/;"	f	file:
print_error	srcs/error.c	/^void	print_error(char *msg)$/;"	f
print_execute_err_1	.ref/1_minishell/errors/execute_err.c	/^int		print_execute_err_1(char *token, char *err_msg)$/;"	f
print_execute_err_2	.ref/1_minishell/errors/execute_err.c	/^int		print_execute_err_2(char *token1, char *token2, char *err_msg)$/;"	f
print_exit_status	.ref/1_minishell/builtins/ft_echo.c	/^void		print_exit_status(void)$/;"	f
print_export	.ref/1_minishell/builtins/ft_export.c	/^void		print_export(char **envs)$/;"	f
print_identifier_err	.ref/1_minishell/errors/envv_err.c	/^void	print_identifier_err(char *token1, char *token2)$/;"	f
print_prompt	srcs/main.c	/^void		print_prompt(t_conf *conf)$/;"	f
print_sorted_env	.ref/minishell/srcs/env/sort_env.c	/^void		print_sorted_env(t_env *env)$/;"	f
put_buff_into_cmdline	.ref/1_minishell/parser/parser.c	/^void		put_buff_into_cmdline(t_data *data)$/;"	f
quit	includes/minishell.h	/^	struct sigaction quit;$/;"	m	struct:s_conf	typeref:struct:s_conf::sigaction
quote	.ref/1_minishell/minishell.h	/^	char		quote;$/;"	m	struct:s_cmd
quote_check	.ref/minishell/srcs/parsing/line.c	/^int		quote_check(t_mini *mini, char **line)$/;"	f
quotes	.ref/minishell/srcs/tools/parsing.c	/^int		quotes(char *line, int index)$/;"	f
read_to_buffer	.ref/1_minishell/Libft/get_next_line.c	/^static ssize_t	read_to_buffer(int fd, t_gnl_material *material)$/;"	f	file:
redir	.ref/minishell/srcs/main/redir.c	/^void	redir(t_mini *mini, t_token *token, int type)$/;"	f
redir_and_exec	.ref/minishell/srcs/main/minishell.c	/^void	redir_and_exec(t_mini *mini, t_token *token)$/;"	f
remove_char	.ref/1_minishell/utils/utils_execute.c	/^int			remove_char(char *str, char c)$/;"	f
remove_single_quotes	.ref/1_minishell/redirection/utils_redir2.c	/^char	*remove_single_quotes(char *str)$/;"	f
reset_fds	.ref/minishell/srcs/tools/fd.c	/^void	reset_fds(t_mini *mini)$/;"	f
reset_std	.ref/minishell/srcs/tools/fd.c	/^void	reset_std(t_mini *mini)$/;"	f
ret	.ref/minishell/includes/minishell.h	/^	int				ret;$/;"	m	struct:s_mini
ret_size	.ref/minishell/srcs/tools/expansions.c	/^int		ret_size(int ret)$/;"	f
return_all	libs/srcs/ft_gnl.c	/^static int			return_all(char **backup, char **line, int read_size)$/;"	f	file:
s_cmd	.ref/1_minishell/minishell.h	/^typedef struct	s_cmd$/;"	s
s_conf	includes/minishell.h	/^typedef struct	s_conf$/;"	s
s_data	.ref/1_minishell/minishell.h	/^typedef	struct	s_data$/;"	s
s_env	.ref/minishell/includes/minishell.h	/^typedef struct	s_env$/;"	s
s_expansions	.ref/minishell/includes/minishell.h	/^typedef struct	s_expansions$/;"	s
s_flgs	.ref/minishell/libft/includes/ft_printf.h	/^struct	s_flgs$/;"	s
s_gnl_material	.ref/1_minishell/Libft/libft.h	/^typedef struct	s_gnl_material$/;"	s
s_list	.ref/1_minishell/Libft/libft.h	/^typedef struct	s_list$/;"	s
s_list	.ref/minishell/libft/includes/libft.h	/^typedef struct		s_list$/;"	s
s_list	libs/includes/libft.h	/^typedef struct		s_list$/;"	s
s_mini	.ref/minishell/includes/minishell.h	/^typedef struct	s_mini$/;"	s
s_node	libs/includes/libft.h	/^typedef struct		s_node$/;"	s
s_redir	.ref/1_minishell/minishell.h	/^typedef struct	s_redir$/;"	s
s_sig	.ref/minishell/includes/minishell.h	/^typedef struct	s_sig$/;"	s
s_stack	libs/includes/libft.h	/^typedef struct		s_stack$/;"	s
s_token	.ref/minishell/includes/minishell.h	/^typedef struct	s_token$/;"	s
secret_env	.ref/minishell/includes/minishell.h	/^	t_env			*secret_env;$/;"	m	struct:s_mini
secret_env_init	.ref/minishell/srcs/env/env.c	/^int				secret_env_init(t_mini *mini, char **env_array)$/;"	f
set_oldpwd_pwd	.ref/1_minishell/builtins/ft_cd.c	/^void		set_oldpwd_pwd(char **envs)$/;"	f
set_quote	.ref/1_minishell/parser/parser.c	/^static void	set_quote(char *input, t_data *data)$/;"	f	file:
set_signal	.ref/1_minishell/utils/utils_signal.c	/^void		set_signal(void)$/;"	f
show_daegae	.ref/1_minishell/main.c	/^void		show_daegae(void)$/;"	f
show_prompt	.ref/1_minishell/main.c	/^void		show_prompt(void)$/;"	f
sig_init	.ref/minishell/srcs/main/signal.c	/^void	sig_init(void)$/;"	f
sig_int	.ref/minishell/srcs/main/signal.c	/^void	sig_int(int code)$/;"	f
sig_quit	.ref/minishell/srcs/main/signal.c	/^void	sig_quit(int code)$/;"	f
sigint	.ref/minishell/includes/minishell.h	/^	int				sigint;$/;"	m	struct:s_sig
sigquit	.ref/minishell/includes/minishell.h	/^	int				sigquit;$/;"	m	struct:s_sig
size_env	.ref/minishell/srcs/env/env.c	/^size_t			size_env(t_env *lst)$/;"	f
sort_env	.ref/minishell/srcs/env/sort_env.c	/^void		sort_env(char **tab, int env_len)$/;"	f
space_alloc	.ref/minishell/srcs/parsing/line.c	/^char	*space_alloc(char *line)$/;"	f
space_line	.ref/minishell/srcs/parsing/line.c	/^char	*space_line(char *line)$/;"	f
split_line	libs/srcs/ft_gnl.c	/^static int			split_line(char **backup, char **line, int cut_idx)$/;"	f	file:
squish_args	.ref/minishell/srcs/parsing/tokens.c	/^void	squish_args(t_mini *mini)$/;"	f
start	.ref/minishell/includes/minishell.h	/^	t_token			*start;$/;"	m	struct:s_mini
start_idx	.ref/1_minishell/Libft/libft.h	/^	size_t		start_idx;$/;"	m	struct:s_gnl_material
stock_trim	.ref/minishell/libft/ft_gnl/get_next_line.c	/^char	*stock_trim(char *stock)$/;"	f
str	.ref/minishell/includes/minishell.h	/^	char			*str;$/;"	m	struct:s_token
str_env_len	.ref/minishell/srcs/env/sort_env.c	/^int			str_env_len(char **env)$/;"	f
substr_and_trim	.ref/1_minishell/redirection/utils_redir.c	/^char	*substr_and_trim(char *command, int start, int num, char *charset)$/;"	f
t_cmd	.ref/1_minishell/minishell.h	/^}				t_cmd;$/;"	t	typeref:struct:s_cmd
t_conf	includes/minishell.h	/^} t_conf;$/;"	t	typeref:struct:s_conf
t_data	.ref/1_minishell/minishell.h	/^}				t_data;$/;"	t	typeref:struct:s_data
t_env	.ref/minishell/includes/minishell.h	/^}				t_env;$/;"	t	typeref:struct:s_env
t_expansions	.ref/minishell/includes/minishell.h	/^}				t_expansions;$/;"	t	typeref:struct:s_expansions
t_gnl_material	.ref/1_minishell/Libft/libft.h	/^}				t_gnl_material;$/;"	t	typeref:struct:s_gnl_material
t_list	.ref/1_minishell/Libft/libft.h	/^}				t_list;$/;"	t	typeref:struct:s_list
t_list	.ref/minishell/libft/includes/libft.h	/^}					t_list;$/;"	t	typeref:struct:s_list
t_list	libs/includes/libft.h	/^}					t_list;$/;"	t	typeref:struct:s_list
t_mini	.ref/minishell/includes/minishell.h	/^}				t_mini;$/;"	t	typeref:struct:s_mini
t_node	libs/includes/libft.h	/^}					t_node;$/;"	t	typeref:struct:s_node
t_redir	.ref/1_minishell/minishell.h	/^}				t_redir;$/;"	t	typeref:struct:s_redir
t_sig	.ref/minishell/includes/minishell.h	/^}				t_sig;$/;"	t	typeref:struct:s_sig
t_stack	libs/includes/libft.h	/^}					t_stack;$/;"	t	typeref:struct:s_stack
t_token	.ref/minishell/includes/minishell.h	/^}				t_token;$/;"	t	typeref:struct:s_token
test_print	srcs/main.c	/^void		test_print(char **envp)$/;"	f
top	libs/includes/libft.h	/^	t_node			*top;$/;"	m	struct:s_stack
type	.ref/minishell/includes/minishell.h	/^	int				type;$/;"	m	struct:s_token
type_arg	.ref/minishell/srcs/parsing/tokens.c	/^void	type_arg(t_token *token, int separator)$/;"	f
types	.ref/1_minishell/minishell.h	/^	char		*types;$/;"	m	struct:s_redir
unset_env	.ref/1_minishell/builtins/ft_unset.c	/^int		unset_env(char *str, char ***envs)$/;"	f
update_oldpwd	.ref/minishell/srcs/builtins/cd.c	/^static int		update_oldpwd(t_env *env)$/;"	f	file:
val	libs/includes/libft.h	/^	int				val;$/;"	m	struct:s_node
value	.ref/minishell/includes/minishell.h	/^	char			*value;$/;"	m	struct:s_env
value_to_print_exist	.ref/1_minishell/Libft/libft.h	/^	int			value_to_print_exist;$/;"	m	struct:s_gnl_material
varlcpy	.ref/minishell/srcs/parsing/expansions.c	/^static int		varlcpy(char *new_arg, const char *env_value, int pos)$/;"	f	file:
width	.ref/minishell/libft/includes/ft_printf.h	/^	int		width;$/;"	m	struct:s_flgs
word_count	.ref/minishell/libft/ft_str/ft_split.c	/^static int	word_count(char const *s, char c)$/;"	f	file:
zero	.ref/minishell/libft/includes/ft_printf.h	/^	int		zero;$/;"	m	struct:s_flgs
